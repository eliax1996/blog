<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on </title>
    <link>//localhost:58546/tags/python/</link>
    <description>Recent content in Python on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>email@example.com (James Chua)</managingEditor>
    <webMaster>email@example.com (James Chua)</webMaster>
    <lastBuildDate>Mon, 18 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:58546/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I like lambda more than partial, but sometimes I pay the price</title>
      <link>//localhost:58546/post/lambdas_vs_partial/</link>
      <pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:58546/post/lambdas_vs_partial/</guid>
      <description></description>
    </item>
    <item>
      <title>Native zip is evil</title>
      <link>//localhost:58546/post/evil_zip/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:58546/post/evil_zip/</guid>
      <description>The zip function is a built-in function in Python that allows you to combine two or more iterables into a single iterable. This is a useful function, but it has a very dangerous pitfall that can lead to very subtle bugs. It does not raise an error when the two iterables have different lengths. Instead, it will silently ignore the extra elements of the longer iterable. This can lead to very hard to track bugs (and has hurt me in the past).</description>
    </item>
    <item>
      <title>Accidental list mutation with asterisk</title>
      <link>//localhost:58546/post/list_mutation_asterisk/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:58546/post/list_mutation_asterisk/</guid>
      <description>Let&amp;rsquo;s say you want to create a list, which has another 10 empty lists. Meaning that you want to create a list that looks like this:&#xA;[[], [], [], [], [], [], [], [], [], []] You might be tempted to do this:&#xA;lists = [[]] * 10 print(lists) # Output: [[], [], [], [], [], [], [], [], [], []] That looks ok! But this will not work as expected.</description>
    </item>
  </channel>
</rss>
